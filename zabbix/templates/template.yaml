zabbix_export:
  version: '7.0'
  template_groups:
    - uuid: a571c0d144b14fd4a87a9d9b2aa9fcd6
      name: Templates/Applications
  templates:
    - uuid: 3d92255f32554d009d4f82366bd3b5de
      template: 'Matomo LastMin Data'
      name: 'Matomo LastMin Data'
      description: |
        This template retrieves and monitors last-minute analytics data from Matomo for the specified website. It fetches key performance metrics using Matomo's API and stores them in Zabbix for real-time monitoring.
        
        Features:
        
        Collects visitor statistics from Matomo, including unique visitors, visits, actions, bounce rate, and session duration.
        Tracks page load performance metrics such as network time, server time, and DOM processing time.
        Uses Zabbix macros for configuration:
        {$MATOMO_WEBSITE} → Website name
        {$MATOMO_LAST_MINUTE} → Time range (e.g., last 1 minute)
        {$MATOMO_TOKEN_AUTH} → Matomo API authentication token
        Includes triggers for high bounce rate, slow page load, low engagement, and network latency issues.
        Enables real-time alerting and performance tracking of the website.
        This template ensures continuous website performance monitoring by integrating Matomo analytics with Zabbix.
      groups:
        - name: Templates/Applications
      items:
        - uuid: 1cd50d78f00d48e4a3d8491c1381198b
          name: 'Device Model New'
          type: DEPENDENT
          key: asdfghjedd
          delay: '0'
          value_type: TEXT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.browsersData[*].label'
          master_item:
            key: matomo.device_model
        - uuid: c14da95dcaae4c86b113b853cdcafbbb
          name: 'Country Data (New)'
          type: DEPENDENT
          key: cdbwcvkb
          delay: '0'
          value_type: TEXT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.browsersData[*].label'
          master_item:
            key: matomo.country_new
        - uuid: 070735c7f5b84a408e8ae5345792bc86
          name: Actions
          type: DEPENDENT
          key: cgewrfhvcoi
          delay: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.visitSummary.nb_actions
          master_item:
            key: matomo.main_item
        - uuid: e404f382e2d44303a7a095e2f03c5cec
          name: 'Device Type new'
          type: DEPENDENT
          key: dfghjkjhv
          delay: '0'
          value_type: TEXT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.browsersData[*].label'
          master_item:
            key: matomo.device_type
        - uuid: 11142fb174624ebe873565f95bf68667
          name: 'Brand Name New'
          type: DEPENDENT
          key: drtwsqhgvcdewui
          delay: '0'
          value_type: TEXT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.browsersData[*].label'
          master_item:
            key: matomo.brand
        - uuid: 18fc2ffb552b43a19530e6af749f250c
          name: 'Visitors Over Brand Name'
          type: DEPENDENT
          key: fdyqewsctdvewg
          delay: '0'
          value_type: TEXT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.browsersData[*].nb_visits'
          master_item:
            key: matomo.brand
        - uuid: b6957d2502284710ad0d89a8af39adbb
          name: Visits
          type: DEPENDENT
          key: iohegwofg
          delay: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.visitSummary.nb_visits
          master_item:
            key: matomo.main_item
        - uuid: 3094d13bf69c4412bf8d5cdc53de7d4b
          name: 'Event Action'
          type: DEPENDENT
          key: matomo.action
          delay: '0'
          value_type: TEXT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.eventActions[*].label'
          master_item:
            key: matomo.scripts
        - uuid: a0ebcea410094d5094789eb9519a9fe1
          name: 'Avg Page Load Time'
          type: DEPENDENT
          key: matomo.avg_page_load_time
          delay: '0'
          value_type: FLOAT
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.pagePerformance.avg_page_load_time
          master_item:
            key: matomo.main_item
          triggers:
            - uuid: cae4ec312fd2468f94fc02ede04498fb
              expression: 'last(/Matomo LastMin Data/matomo.avg_page_load_time,#1)>3'
              name: 'High Page Load Time Trigger'
              priority: HIGH
              description: '"Page load time is too high. Users might leave the site."'
        - uuid: 224c5483203f4a4f810f127ee3d7324a
          name: 'Avg DOM Completion Time'
          type: DEPENDENT
          key: matomo.avg_time_dom_completion
          delay: '0'
          value_type: FLOAT
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.pagePerformance.avg_time_dom_completion
          master_item:
            key: matomo.main_item
        - uuid: 4f8190f513c64d4db4670546a6d549e2
          name: 'Avg DOM Processing Time'
          type: DEPENDENT
          key: matomo.avg_time_dom_processing
          delay: '0'
          value_type: FLOAT
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.pagePerformance.avg_time_dom_processing
          master_item:
            key: matomo.main_item
        - uuid: 8710013b0a9b4234a3293b6d598c49eb
          name: 'Avg Network Time'
          type: DEPENDENT
          key: matomo.avg_time_network
          delay: '0'
          value_type: FLOAT
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.pagePerformance.avg_time_network
          master_item:
            key: matomo.main_item
          triggers:
            - uuid: 454b0c350acf403bb096f56af08b2248
              expression: 'last(/Matomo LastMin Data/matomo.avg_time_network,#1)>0.5'
              name: 'High Network Latency Trigger'
              priority: INFO
              description: '"Network response is slow. Check network performance."'
        - uuid: 04e5e640f0ec416a838a785aa0b0ac1c
          name: 'Avg On-Load Time'
          type: DEPENDENT
          key: matomo.avg_time_on_load
          delay: '0'
          value_type: FLOAT
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.pagePerformance.avg_time_on_load
          master_item:
            key: matomo.main_item
        - uuid: 4fe81c0ce9084996b9fc53f164e9e28f
          name: 'Avg Time on Site'
          type: DEPENDENT
          key: matomo.avg_time_on_site
          delay: '0'
          value_type: FLOAT
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.visitSummary.avg_time_on_site
          master_item:
            key: matomo.main_item
          triggers:
            - uuid: 2d72d7f9cd304a2ca5ad7c0a34c24886
              expression: 'last(/Matomo LastMin Data/matomo.avg_time_on_site)<10'
              name: 'Low Average Time on Site Trigger'
              priority: WARNING
              description: '"Users are leaving quickly, indicating low engagement."'
        - uuid: 1906ce10cf1e44fc80bda0c9ba47e479
          name: 'Avg Server Time'
          type: DEPENDENT
          key: matomo.avg_time_server
          delay: '0'
          value_type: FLOAT
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.pagePerformance.avg_time_server
          master_item:
            key: matomo.main_item
          triggers:
            - uuid: 1caa2475a1284355b85f339a899e6072
              expression: 'last(/Matomo LastMin Data/matomo.avg_time_server,#1)>1'
              name: 'High Server Response Time Trigger'
              priority: AVERAGE
              description: '"Server response time is slow, affecting user experience."'
        - uuid: c1e5085ddf59472fbd21d0bd6d1c70a6
          name: 'Avg Transfer Time'
          type: DEPENDENT
          key: matomo.avg_time_transfer
          delay: '0'
          value_type: FLOAT
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.pagePerformance.avg_time_transfer
          master_item:
            key: matomo.main_item
        - uuid: 14afaf3994f84a0795d92ce6025cfc34
          name: 'Bounce Rate in page url'
          type: DEPENDENT
          key: matomo.bounce
          delay: '0'
          value_type: TEXT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.pageUrls[*].bounce_rate'
          master_item:
            key: matomo.movers_shakers
        - uuid: 4abcfa0d20b24f2884a7451e691e215e
          name: 'Bounce Count'
          type: DEPENDENT
          key: matomo.bounce_count
          delay: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.visitSummary.bounce_count
          master_item:
            key: matomo.main_item
          triggers:
            - uuid: 231e560476ff4f478f24f35015273072
              expression: 'last(/Matomo LastMin Data/matomo.bounce_count,#1)>50'
              name: 'High Drop-off Trigger'
              priority: WARNING
              description: '"Too many users are leaving without interaction."'
        - uuid: 73c5781264474b40a6309d0e51765326
          name: 'Bounce Rate (%)'
          type: DEPENDENT
          key: matomo.bounce_rate
          delay: '0'
          value_type: FLOAT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.visitSummary.bounce_rate
            - type: STR_REPLACE
              parameters:
                - '%'
                - ''
          master_item:
            key: matomo.main_item
          triggers:
            - uuid: a17e7554447b4ae483303ea0d7447f5d
              expression: 'last(/Matomo LastMin Data/matomo.bounce_rate,#1)>90'
              name: 'High Bounce Rate Trigger'
              priority: WARNING
              description: '"Bounce rate is high, indicating low engagement."'
        - uuid: 197352f0b3094ed49fec8acec1faee78
          name: 'Brand Name'
          type: SCRIPT
          key: matomo.brand
          value_type: TEXT
          trends: '0'
          params: |
            var DevicesDetectionAPI = {
                params: {
                    matomoBaseUrl: '{$MATOMO_BASE_URL}', // Replace with your Matomo base URL
                    tokenAuth: '{$TOKEN_AUTH}', // Replace with your Auth Token
                    websiteName: '{$WEBSITE_NAME}', // Website Name from Zabbix macro
                    period: '{$PERIOD}', // Specify the period
                    date: '{$DATE}' // Specify the date
                },
            
                // Fetch Site ID from website name
                fetchSiteId: function () {
                    var request = new HttpRequest();
                    var siteIdUrl = this.params.matomoBaseUrl +
                        '/index.php?module=API&method=SitesManager.getAllSites' +
                        '&format=json&token_auth=' + this.params.tokenAuth;
            
                    var response = request.get(siteIdUrl);
                    Zabbix.log(4, '[Devices Detection API] Site ID Response: ' + response);
            
                    if (request.getStatus() !== 200) {
                        throw 'Failed to fetch Site ID. Status: ' + request.getStatus();
                    }
            
                    try {
                        var data = JSON.parse(response);
                        if (!Array.isArray(data)) {
                            throw 'Invalid response format. Expected an array.';
                        }
            
                        var siteId = null;
                        for (var i = 0; i < data.length; i++) {
                            if (data[i].name && data[i].name.trim().toLowerCase() === this.params.websiteName.trim().toLowerCase()) {
                                siteId = data[i].idsite;
                                break;
                            }
                        }
            
                        if (!siteId) {
                            throw 'No site ID found for the website: ' + this.params.websiteName;
                        }
            
                        return siteId;
                    } catch (error) {
                        throw 'Error parsing Site ID response: ' + error + '. Raw response: ' + response;
                    }
                },
            
                // Fetch Devices Detection data
                fetchBrowsersData: function (idSite) {
                    var request = new HttpRequest();
                    var apiUrl = this.params.matomoBaseUrl +
                        '/index.php?module=API&method=DevicesDetection.getBrand' +
                        '&idSite=' + idSite +
                        '&period=' + this.params.period +
                        '&date=' + this.params.date +
                        '&format=json&token_auth=' + this.params.tokenAuth;
            
                    var response = request.get(apiUrl);
                    Zabbix.log(4, '[Devices Detection API] Response: ' + response);
            
                    if (request.getStatus() !== 200) {
                        throw 'Failed to fetch Devices Detection data. Status: ' + request.getStatus();
                    }
            
                    try {
                        return JSON.parse(response);
                    } catch (error) {
                        throw 'Failed to parse Devices Detection response: ' + error;
                    }
                }
            };
            
            // Execute the script
            try {
                var idSite = DevicesDetectionAPI.fetchSiteId();
                var browsersData = DevicesDetectionAPI.fetchBrowsersData(idSite);
            
                return JSON.stringify({
                    idSite: idSite,
                    browsersData: browsersData
                }, null, 2);
            } catch (error) {
                Zabbix.log(3, '[Devices Detection API] ERROR: ' + error);
                return JSON.stringify({ 'error': error });
            }
          timeout: 90s
          tags:
            - tag: Matomo
              value: 'Brand Name'
        - uuid: 62fc453aacdd4936aa8be118ae943df0
          name: Browser
          type: DEPENDENT
          key: matomo.browser
          delay: '0'
          value_type: CHAR
          trends: '0'
          status: DISABLED
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.visitDetails[*].browser'
          master_item:
            key: matomo.main_item
        - uuid: bd55810650d44aa78d22df6a83db26e5
          name: 'Browsers new'
          type: SCRIPT
          key: matomo.browsers
          value_type: TEXT
          trends: '0'
          params: |
            var DevicesDetectionAPI = {
                params: {
                    matomoBaseUrl: '{$MATOMO_BASE_URL}', // Replace with your Matomo base URL
                    tokenAuth: '{$TOKEN_AUTH}', // Replace with your Auth Token
                    websiteName: '{$WEBSITE_NAME}', // Website Name from Zabbix macro
                    period: '{$PERIOD}', // Specify the period
                    date: '{$DATE}' // Specify the date
                },
            
                // Fetch Site ID from website name
                fetchSiteId: function () {
                    var request = new HttpRequest();
                    var siteIdUrl = this.params.matomoBaseUrl +
                        '/index.php?module=API&method=SitesManager.getAllSites' +
                        '&format=json&token_auth=' + this.params.tokenAuth;
            
                    var response = request.get(siteIdUrl);
                    Zabbix.log(4, '[Devices Detection API] Site ID Response: ' + response);
            
                    if (request.getStatus() !== 200) {
                        throw 'Failed to fetch Site ID. Status: ' + request.getStatus();
                    }
            
                    try {
                        var data = JSON.parse(response);
                        if (!Array.isArray(data)) {
                            throw 'Invalid response format. Expected an array.';
                        }
            
                        var siteId = null;
                        for (var i = 0; i < data.length; i++) {
                            if (data[i].name && data[i].name.trim().toLowerCase() === this.params.websiteName.trim().toLowerCase()) {
                                siteId = data[i].idsite;
                                break;
                            }
                        }
            
                        if (!siteId) {
                            throw 'No site ID found for the website: ' + this.params.websiteName;
                        }
            
                        return siteId;
                    } catch (error) {
                        throw 'Error parsing Site ID response: ' + error + '. Raw response: ' + response;
                    }
                },
            
                // Fetch Devices Detection data
                fetchBrowsersData: function (idSite) {
                    var request = new HttpRequest();
                    var apiUrl = this.params.matomoBaseUrl +
                        '/index.php?module=API&method=DevicesDetection.getBrowsers' +
                        '&idSite=' + idSite +
                        '&period=' + this.params.period +
                        '&date=' + this.params.date +
                        '&format=json&token_auth=' + this.params.tokenAuth;
            
                    var response = request.get(apiUrl);
                    Zabbix.log(4, '[Devices Detection API] Response: ' + response);
            
                    if (request.getStatus() !== 200) {
                        throw 'Failed to fetch Devices Detection data. Status: ' + request.getStatus();
                    }
            
                    try {
                        return JSON.parse(response);
                    } catch (error) {
                        throw 'Failed to parse Devices Detection response: ' + error;
                    }
                }
            };
            
            // Execute the script
            try {
                var idSite = DevicesDetectionAPI.fetchSiteId();
                var browsersData = DevicesDetectionAPI.fetchBrowsersData(idSite);
            
                return JSON.stringify({
                    idSite: idSite,
                    browsersData: browsersData
                }, null, 2);
            } catch (error) {
                Zabbix.log(3, '[Devices Detection API] ERROR: ' + error);
                return JSON.stringify({ 'error': error });
            }
          timeout: 90s
          tags:
            - tag: Matomo
              value: 'Browsers new'
        - uuid: 077bf481a2734d609469510d12130625
          name: 'Event Category'
          type: DEPENDENT
          key: matomo.cate
          delay: '0'
          value_type: TEXT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.eventCategories[*].label'
          master_item:
            key: matomo.scripts
        - uuid: edc1abc6dd31409eafa178fb673122c2
          name: 'Visits over Events'
          type: DEPENDENT
          key: matomo.cgfwyhcvyu
          delay: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.eventCategories[*].nb_visits'
          master_item:
            key: matomo.scripts
        - uuid: d88e24c759414766b0abe41ef9580e46
          name: 'Channel Type'
          type: SCRIPT
          key: matomo.channel
          value_type: TEXT
          trends: '0'
          params: |
            var API = {
                params: {
                    matomoBaseUrl: '{$MATOMO_BASE_URL}', // Matomo Base URL from Zabbix macro
                    tokenAuth: '{$TOKEN_AUTH}', // Auth Token from Zabbix macro
                    websiteName: '{$WEBSITE_NAME}', // Website Name from Zabbix macro
                    period: '{$PERIOD}', // Period from Zabbix macro (e.g., day, week, month)
                    date: '{$DATE}' // Date from Zabbix macro (e.g., today, yyyy-mm-dd)
                },
            
                // Function to fetch site ID from the website name
                fetchSiteId: function () {
                    var request = new HttpRequest();
                    var siteIdUrl = this.params.matomoBaseUrl +
                        '/index.php?module=API&method=SitesManager.getSitesWithAdminAccess' +
                        '&format=json&token_auth=' + this.params.tokenAuth;
            
                    var response = request.get(siteIdUrl);
                    Zabbix.log(4, '[API Request] Site ID Response: ' + response);
            
                    if (request.getStatus() !== 200) {
                        throw 'Failed to fetch Site ID. Status: ' + request.getStatus();
                    }
            
                    try {
                        var data = JSON.parse(response);
                        if (!Array.isArray(data)) {
                            throw 'Invalid response format. Expected an array.';
                        }
            
                        var siteId = null;
                        for (var i = 0; i < data.length; i++) {
                            if (data[i].name === this.params.websiteName) {
                                siteId = data[i].idsite;
                                break;
                            }
                        }
            
                        if (!siteId) {
                            throw 'No site ID found for the website: ' + this.params.websiteName;
                        }
            
                        return siteId;
                    } catch (error) {
                        throw 'Error parsing Site ID response: ' + error;
                    }
                },
            
                // Function to fetch data from Matomo API
                fetchData: function (endpoint, idSite) {
                    var request = new HttpRequest();
                    var apiUrl = this.params.matomoBaseUrl + endpoint +
                        '&idSite=' + idSite +
                        '&period=' + this.params.period +
                        '&date=' + this.params.date +
                        '&format=json&token_auth=' + this.params.tokenAuth;
            
                    var response = request.get(apiUrl);
                    Zabbix.log(4, '[API Request] Response from ' + endpoint + ': ' + response);
            
                    if (request.getStatus() !== 200) {
                        throw 'Request failed for ' + endpoint + ' with status ' + request.getStatus();
                    }
            
                    try {
                        return JSON.parse(response);
                    } catch (error) {
                        throw 'Failed to parse response from ' + endpoint + ': ' + error;
                    }
                },
            
                // Fetch Channel Type (Referrer Type)
                fetchChannelType: function (idSite) {
                    return this.fetchData('/index.php?module=API&method=Referrers.getReferrerType', idSite);
                },
            
                // Fetch All Referrers
                fetchAllReferrers: function (idSite) {
                    return this.fetchData('/index.php?module=API&method=Referrers.getAll', idSite);
                }
            };
            
            // Execute the script
            try {
                var idSite = API.fetchSiteId();
                var channelType = API.fetchChannelType(idSite);
                var allReferrers = API.fetchAllReferrers(idSite);
            
                return JSON.stringify({
                    idSite: idSite,
                    channelType: channelType,
                    allReferrers: allReferrers
                }, null, 2);
            } catch (error) {
                Zabbix.log(3, '[API Request] ERROR: ' + error);
                return JSON.stringify({ 'error': error });
            }
          timeout: 90s
          tags:
            - tag: Matomo
              value: 'Channel Type'
        - uuid: dd8f015ee54643c1854825615b19ba25
          name: 'channel bounce count'
          type: DEPENDENT
          key: matomo.channel.bounce_count
          delay: '0'
          value_type: TEXT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.channelType[*].bounce_count'
          master_item:
            key: matomo.channel
        - uuid: 5d2446843c714ed595038f46b904489d
          name: 'Channel Type name'
          type: DEPENDENT
          key: matomo.channel.name
          delay: '0'
          value_type: TEXT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.channelType[*].label'
          master_item:
            key: matomo.channel
        - uuid: 1e75bd510eeb4e7e9cf89da34dfb1ae9
          name: 'Channel visitors'
          type: DEPENDENT
          key: matomo.channel.visitors
          delay: '0'
          value_type: TEXT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.channelType[*].nb_visits'
          master_item:
            key: matomo.channel
        - uuid: d68a7c7b7f8a417992e5ac0c934f4b79
          name: Country
          type: DEPENDENT
          key: matomo.country
          delay: '0'
          value_type: CHAR
          trends: '0'
          status: DISABLED
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.visitDetails[*].country'
          master_item:
            key: matomo.main_item
        - uuid: 088b66f2907746fbafbdaebc06dbc5f8
          name: 'Country New'
          type: SCRIPT
          key: matomo.country_new
          value_type: TEXT
          trends: '0'
          params: |
            var DevicesDetectionAPI = {
                params: {
                    matomoBaseUrl: '{$MATOMO_BASE_URL}', // Replace with your Matomo base URL
                    tokenAuth: '{$TOKEN_AUTH}', // Replace with your Auth Token
                    websiteName: '{$WEBSITE_NAME}', // Website Name from Zabbix macro
                    period: '{$PERIOD}', // Specify the period
                    date: '{$DATE}' // Specify the date
                },
            
                // Fetch Site ID from website name
                fetchSiteId: function () {
                    var request = new HttpRequest();
                    var siteIdUrl = this.params.matomoBaseUrl +
                        '/index.php?module=API&method=SitesManager.getAllSites' +
                        '&format=json&token_auth=' + this.params.tokenAuth;
            
                    var response = request.get(siteIdUrl);
                    Zabbix.log(4, '[Devices Detection API] Site ID Response: ' + response);
            
                    if (request.getStatus() !== 200) {
                        throw 'Failed to fetch Site ID. Status: ' + request.getStatus();
                    }
            
                    try {
                        var data = JSON.parse(response);
                        if (!Array.isArray(data)) {
                            throw 'Invalid response format. Expected an array.';
                        }
            
                        var siteId = null;
                        for (var i = 0; i < data.length; i++) {
                            if (data[i].name && data[i].name.trim().toLowerCase() === this.params.websiteName.trim().toLowerCase()) {
                                siteId = data[i].idsite;
                                break;
                            }
                        }
            
                        if (!siteId) {
                            throw 'No site ID found for the website: ' + this.params.websiteName;
                        }
            
                        return siteId;
                    } catch (error) {
                        throw 'Error parsing Site ID response: ' + error + '. Raw response: ' + response;
                    }
                },
            
                // Fetch Devices Detection data
                fetchBrowsersData: function (idSite) {
                    var request = new HttpRequest();
                    var apiUrl = this.params.matomoBaseUrl +
                        '/index.php?module=API&method=UserCountry.getCountry' +
                        '&idSite=' + idSite +
                        '&period=' + this.params.period +
                        '&date=' + this.params.date +
                        '&format=json&token_auth=' + this.params.tokenAuth;
            
                    var response = request.get(apiUrl);
                    Zabbix.log(4, '[Devices Detection API] Response: ' + response);
            
                    if (request.getStatus() !== 200) {
                        throw 'Failed to fetch Devices Detection data. Status: ' + request.getStatus();
                    }
            
                    try {
                        return JSON.parse(response);
                    } catch (error) {
                        throw 'Failed to parse Devices Detection response: ' + error;
                    }
                }
            };
            
            // Execute the script
            try {
                var idSite = DevicesDetectionAPI.fetchSiteId();
                var browsersData = DevicesDetectionAPI.fetchBrowsersData(idSite);
            
                return JSON.stringify({
                    idSite: idSite,
                    browsersData: browsersData
                }, null, 2);
            } catch (error) {
                Zabbix.log(3, '[Devices Detection API] ERROR: ' + error);
                return JSON.stringify({ 'error': error });
            }
          timeout: 90s
          tags:
            - tag: Matomo
              value: 'Country New'
        - uuid: e6cde5a8344c41e0b964cd5a61c9d9c8
          name: 'Device Type old'
          type: DEPENDENT
          key: matomo.device.type
          delay: '0'
          value_type: CHAR
          trends: '0'
          status: DISABLED
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.visitDetails[0].deviceType'
          master_item:
            key: matomo.main_item
        - uuid: edb8a653a3ff45e9b02fef43ad284375
          name: 'Device Model'
          type: SCRIPT
          key: matomo.device_model
          value_type: TEXT
          trends: '0'
          params: |
            var DevicesDetectionAPI = {
                params: {
                    matomoBaseUrl: '{$MATOMO_BASE_URL}', // Replace with your Matomo base URL
                    tokenAuth: '{$TOKEN_AUTH}', // Replace with your Auth Token
                    websiteName: '{$WEBSITE_NAME}', // Website Name from Zabbix macro
                    period: '{$PERIOD}', // Specify the period
                    date: '{$DATE}' // Specify the date
                },
            
                // Fetch Site ID from website name
                fetchSiteId: function () {
                    var request = new HttpRequest();
                    var siteIdUrl = this.params.matomoBaseUrl +
                        '/index.php?module=API&method=SitesManager.getAllSites' +
                        '&format=json&token_auth=' + this.params.tokenAuth;
            
                    var response = request.get(siteIdUrl);
                    Zabbix.log(4, '[Devices Detection API] Site ID Response: ' + response);
            
                    if (request.getStatus() !== 200) {
                        throw 'Failed to fetch Site ID. Status: ' + request.getStatus();
                    }
            
                    try {
                        var data = JSON.parse(response);
                        if (!Array.isArray(data)) {
                            throw 'Invalid response format. Expected an array.';
                        }
            
                        var siteId = null;
                        for (var i = 0; i < data.length; i++) {
                            if (data[i].name && data[i].name.trim().toLowerCase() === this.params.websiteName.trim().toLowerCase()) {
                                siteId = data[i].idsite;
                                break;
                            }
                        }
            
                        if (!siteId) {
                            throw 'No site ID found for the website: ' + this.params.websiteName;
                        }
            
                        return siteId;
                    } catch (error) {
                        throw 'Error parsing Site ID response: ' + error + '. Raw response: ' + response;
                    }
                },
            
                // Fetch Devices Detection data
                fetchBrowsersData: function (idSite) {
                    var request = new HttpRequest();
                    var apiUrl = this.params.matomoBaseUrl +
                        '/index.php?module=API&method=DevicesDetection.getModel' +
                        '&idSite=' + idSite +
                        '&period=' + this.params.period +
                        '&date=' + this.params.date +
                        '&format=json&token_auth=' + this.params.tokenAuth;
            
                    var response = request.get(apiUrl);
                    Zabbix.log(4, '[Devices Detection API] Response: ' + response);
            
                    if (request.getStatus() !== 200) {
                        throw 'Failed to fetch Devices Detection data. Status: ' + request.getStatus();
                    }
            
                    try {
                        return JSON.parse(response);
                    } catch (error) {
                        throw 'Failed to parse Devices Detection response: ' + error;
                    }
                }
            };
            
            // Execute the script
            try {
                var idSite = DevicesDetectionAPI.fetchSiteId();
                var browsersData = DevicesDetectionAPI.fetchBrowsersData(idSite);
            
                return JSON.stringify({
                    idSite: idSite,
                    browsersData: browsersData
                }, null, 2);
            } catch (error) {
                Zabbix.log(3, '[Devices Detection API] ERROR: ' + error);
                return JSON.stringify({ 'error': error });
            }
          timeout: 90s
          tags:
            - tag: Matomo
              value: 'Device Model'
        - uuid: e9d3a60e4eda4e45898550f91f94e185
          name: 'Device Type'
          type: SCRIPT
          key: matomo.device_type
          value_type: TEXT
          trends: '0'
          params: |
            var DevicesDetectionAPI = {
                params: {
                    matomoBaseUrl: '{$MATOMO_BASE_URL}', // Replace with your Matomo base URL
                    tokenAuth: '{$TOKEN_AUTH}', // Replace with your Auth Token
                    websiteName: '{$WEBSITE_NAME}', // Website Name from Zabbix macro
                    period: '{$PERIOD}', // Specify the period
                    date: '{$DATE}' // Specify the date
                },
            
                // Fetch Site ID from website name
                fetchSiteId: function () {
                    var request = new HttpRequest();
                    var siteIdUrl = this.params.matomoBaseUrl +
                        '/index.php?module=API&method=SitesManager.getAllSites' +
                        '&format=json&token_auth=' + this.params.tokenAuth;
            
                    var response = request.get(siteIdUrl);
                    Zabbix.log(4, '[Devices Detection API] Site ID Response: ' + response);
            
                    if (request.getStatus() !== 200) {
                        throw 'Failed to fetch Site ID. Status: ' + request.getStatus();
                    }
            
                    try {
                        var data = JSON.parse(response);
                        if (!Array.isArray(data)) {
                            throw 'Invalid response format. Expected an array.';
                        }
            
                        var siteId = null;
                        for (var i = 0; i < data.length; i++) {
                            if (data[i].name && data[i].name.trim().toLowerCase() === this.params.websiteName.trim().toLowerCase()) {
                                siteId = data[i].idsite;
                                break;
                            }
                        }
            
                        if (!siteId) {
                            throw 'No site ID found for the website: ' + this.params.websiteName;
                        }
            
                        return siteId;
                    } catch (error) {
                        throw 'Error parsing Site ID response: ' + error + '. Raw response: ' + response;
                    }
                },
            
                // Fetch Devices Detection data
                fetchBrowsersData: function (idSite) {
                    var request = new HttpRequest();
                    var apiUrl = this.params.matomoBaseUrl +
                        '/index.php?module=API&method=DevicesDetection.getType' +
                        '&idSite=' + idSite +
                        '&period=' + this.params.period +
                        '&date=' + this.params.date +
                        '&format=json&token_auth=' + this.params.tokenAuth;
            
                    var response = request.get(apiUrl);
                    Zabbix.log(4, '[Devices Detection API] Response: ' + response);
            
                    if (request.getStatus() !== 200) {
                        throw 'Failed to fetch Devices Detection data. Status: ' + request.getStatus();
                    }
            
                    try {
                        return JSON.parse(response);
                    } catch (error) {
                        throw 'Failed to parse Devices Detection response: ' + error;
                    }
                }
            };
            
            // Execute the script
            try {
                var idSite = DevicesDetectionAPI.fetchSiteId();
                var browsersData = DevicesDetectionAPI.fetchBrowsersData(idSite);
            
                return JSON.stringify({
                    idSite: idSite,
                    browsersData: browsersData
                }, null, 2);
            } catch (error) {
                Zabbix.log(3, '[Devices Detection API] ERROR: ' + error);
                return JSON.stringify({ 'error': error });
            }
          timeout: 90s
          tags:
            - tag: Matomo
              value: 'Device Type'
        - uuid: 909d3c8f6f9e489495fb3f685e24e64a
          name: 'Entry Visits on page url'
          type: DEPENDENT
          key: matomo.entry
          delay: '0'
          value_type: TEXT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.pageUrls[*].entry_nb_visits'
          master_item:
            key: matomo.movers_shakers
        - uuid: abb10da61565448397085cb926c8689c
          name: 'Exit Visits on page url'
          type: DEPENDENT
          key: matomo.exit
          delay: '0'
          value_type: TEXT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.pageUrls[*].exit_nb_visits'
          master_item:
            key: matomo.movers_shakers
        - uuid: c33df3c8b1a044ea842d3ae7f932d1ba
          name: 'Exit rate on url'
          type: DEPENDENT
          key: matomo.exit_rate
          delay: '0'
          value_type: TEXT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.pageUrls[*].exit_rate'
          master_item:
            key: matomo.movers_shakers
        - uuid: d3b7f2ee2a5744e399ed2944ac529706
          name: 'First Action Time'
          type: DEPENDENT
          key: matomo.first.action
          delay: '0'
          value_type: LOG
          trends: '0'
          master_item:
            key: matomo.main_item
        - uuid: 21c57c945c384a14879bc39ef6e4469f
          name: 'Lastitude and Longitude'
          type: SCRIPT
          key: matomo.lat_long
          value_type: TEXT
          trends: '0'
          params: |
            var MatomoAPI = {
                params: {
                    matomoBaseUrl: '{$MATOMO_BASE_URL}', // Base URL like https://your-matomo-domain/matomo
                    tokenAuth: '{$TOKEN_AUTH}',           // Your Matomo API token
                    websiteName: '{$WEBSITE_NAME}',       // Website name you know
                    period: '{$PERIOD}',                  // e.g., day
                    date: '{$DATE}'                       // e.g., today
                },
            
                // Step 1: Fetch idSite from Website Name
                fetchIdSite: function () {
                    var request = new HttpRequest();
                    var url = this.params.matomoBaseUrl + '/index.php?module=API&method=SitesManager.getSitesWithAtLeastViewAccess' +
                              '&format=json&token_auth=' + this.params.tokenAuth;
            
                    var response = request.get(url);
                    Zabbix.log(4, '[MatomoAPI] Site List Response: ' + response);
            
                    if (request.getStatus() !== 200) {
                        throw 'Failed to fetch site list, status: ' + request.getStatus();
                    }
            
                    try {
                        var sites = JSON.parse(response);
                        for (var i = 0; i < sites.length; i++) {
                            if (sites[i].name === this.params.websiteName) {
                                return sites[i].idsite;
                            }
                        }
                        throw ('Website "' + this.params.websiteName + '" not found.');
                    } catch (err) {
                        throw ('Failed to parse site list: ' + err);
                    }
                },
            
                // Step 2: Fetch Visitors with Latitude/Longitude
                fetchVisitors: function (idSite) {
                    var request = new HttpRequest();
                    var url = this.params.matomoBaseUrl + '/index.php?module=API&method=Live.getLastVisitsDetails' +
                              '&idSite=' + idSite +
                              '&period=' + this.params.period +
                              '&date=' + this.params.date +
                              '&format=json&token_auth=' + this.params.tokenAuth;
            
                    var response = request.get(url);
                    Zabbix.log(4, '[MatomoAPI] Visits Response: ' + response);
            
                    if (request.getStatus() !== 200) {
                        throw 'Failed to fetch visit details, status: ' + request.getStatus();
                    }
            
                    try {
                        var visits = JSON.parse(response);
                        var visitorsWithLocation = [];
            
                        for (var i = 0; i < visits.length; i++) {
                            if (visits[i].latitude && visits[i].longitude) {
                                visitorsWithLocation.push({
                                    latitude: visits[i].latitude,
                                    longitude: visits[i].longitude
                                });
                            }
                        }
            
                        return {
                            visitor_count: visitorsWithLocation.length,
                            visitors: visitorsWithLocation
                        };
                    } catch (err) {
                        throw ('Failed to parse visit details: ' + err);
                    }
                }
            };
            
            // Execute
            try {
                var idSite = MatomoAPI.fetchIdSite();
                var result = MatomoAPI.fetchVisitors(idSite);
                return JSON.stringify(result);
            } catch (err) {
                Zabbix.log(3, '[MatomoAPI] ERROR: ' + err);
                return JSON.stringify({ 'error': err });
            }
          timeout: 60s
        - uuid: 45f4b6074419437f9d845ce46893952f
          name: 'Matomo Last Minute Data'
          type: SCRIPT
          key: matomo.main_item
          value_type: TEXT
          trends: '0'
          params: |
            var API = {
                params: {
                    matomoBaseUrl: '{$MATOMO_BASE_URL}', // Matomo base URL as Zabbix macro
                    tokenAuth: '{$TOKEN_AUTH}', // Auth Token as Zabbix macro
                    websiteName: '{$WEBSITE_NAME}', // Website name as Zabbix macro
                    lastMinutes: '{$LASTMINUTES}', // Last minutes as Zabbix macro
                    period: '{$PERIOD}', // Period as Zabbix macro
                    date: '{$DATE}' // Date as Zabbix macro
                },
            
                // Function to fetch site ID from the website name
                fetchSiteId: function () {
                    var request = new HttpRequest();
                    var siteIdUrl = this.params.matomoBaseUrl +
                        '?module=API&method=SitesManager.getSitesWithAdminAccess' +
                        '&format=json&token_auth=' + this.params.tokenAuth;
            
                    var response = request.get(siteIdUrl);
                    Zabbix.log(4, '[API Request] Site ID Response: ' + response);
            
                    if (request.getStatus() !== 200) {
                        throw 'Failed to fetch Site ID. Status: ' + request.getStatus();
                    }
            
                    try {
                        var data = JSON.parse(response);
                        if (!Array.isArray(data)) {
                            throw 'Invalid response format. Expected an array.';
                        }
            
                        var siteId = null;
                        for (var i = 0; i < data.length; i++) {
                            if (data[i].name === this.params.websiteName) {
                                siteId = data[i].idsite;
                                break;
                            }
                        }
            
                        if (!siteId) {
                            throw 'No site ID found for the website: ' + this.params.websiteName;
                        }
            
                        return siteId;
                    } catch (error) {
                        throw 'Error parsing Site ID response: ' + error;
                    }
                },
            
                // Function to fetch visit details
                fetchData: function (idSite) {
                    var request = new HttpRequest();
                    var apiUrl = this.params.matomoBaseUrl +
                        '?module=API&method=Live.getLastVisitsDetails' +
                        '&idSite=' + idSite +
                        '&period=' + this.params.period +
                        '&date=' + this.params.date +
                        '&format=json&token_auth=' + this.params.tokenAuth;
            
                    var response = request.get(apiUrl);
                    Zabbix.log(4, '[API Request] Response: ' + response);
            
                    if (request.getStatus() !== 200) {
                        throw 'Request failed with status ' + request.getStatus();
                    }
            
                    try {
                        var data = JSON.parse(response);
                    } catch (error) {
                        throw 'Failed to parse response: ' + error;
                    }
            
                    var currentTimestamp = Math.floor(Date.now() / 1000);
                    var lastMinutes = parseInt(this.params.lastMinutes, 10);
                    var timeAgo = currentTimestamp - (lastMinutes * 60);
            
                    var filteredData = [];
                    for (var i = 0; i < data.length; i++) {
                        var visit = data[i];
            
                        if (visit.firstActionTimestamp >= timeAgo) {
                            filteredData.push({
                                visitIp: visit.visitIp,
                                deviceType: visit.deviceType || "Unknown",
                                operatingSystem: visit.operatingSystem || "Unknown",
                                firstActionTimestamp: visit.firstActionTimestamp || "Unknown",
                                browser: visit.browser || "Unknown",
                                country: visit.country || "Unknown",
                                visitDate: visit.serverDate || "Unknown"
                            });
                        }
                    }
            
                    return filteredData;
                },
            
                // Function to fetch visit summary
                fetchVisitSummary: function (idSite) {
                    var request = new HttpRequest();
                    var visitSummaryUrl = this.params.matomoBaseUrl +
                        '?module=API&method=VisitsSummary.get' +
                        '&idSite=' + idSite +
                        '&period=' + this.params.period +
                        '&date=' + this.params.date +
                        '&format=json&token_auth=' + this.params.tokenAuth;
            
                    var response = request.get(visitSummaryUrl);
                    Zabbix.log(4, '[API Request] Visit Summary Response: ' + response);
            
                    if (request.getStatus() !== 200) {
                        throw 'Request failed with status ' + request.getStatus();
                    }
            
                    try {
                        return JSON.parse(response);
                    } catch (error) {
                        throw 'Failed to parse response: ' + error;
                    }
                },
            
                // Function to fetch page performance
                fetchPagePerformance: function (idSite) {
                    var request = new HttpRequest();
                    var pagePerformanceUrl = this.params.matomoBaseUrl +
                        '?module=API&method=PagePerformance.get' +
                        '&idSite=' + idSite +
                        '&period=' + this.params.period +
                        '&date=' + this.params.date +
                        '&format=json&token_auth=' + this.params.tokenAuth;
            
                    var response = request.get(pagePerformanceUrl);
                    Zabbix.log(4, '[API Request] Page Performance Response: ' + response);
            
                    if (request.getStatus() !== 200) {
                        throw 'Request failed with status ' + request.getStatus();
                    }
            
                    try {
                        return JSON.parse(response);
                    } catch (error) {
                        throw 'Failed to parse page performance response: ' + error;
                    }
                }
            };
            
            // Execute the script
            try {
                var idSite = API.fetchSiteId();
                var visitDetails = API.fetchData(idSite);
                var visitSummary = API.fetchVisitSummary(idSite);
                var pagePerformance = API.fetchPagePerformance(idSite);
            
                return JSON.stringify({
                    visitDetails: visitDetails,
                    visitSummary: visitSummary,
                    pagePerformance: pagePerformance
                }, null, 2);
            } catch (error) {
                Zabbix.log(3, '[API Request] ERROR: ' + error);
                return JSON.stringify({ 'error': error });
            }
          timeout: 90s
          parameters:
            - name: lastMinutes
              value: '{$LASTMINUTES}'
            - name: matomobaseurl
              value: '{$MATOMO_BASE_URL}'
            - name: tokenAuth
              value: '{$TOKEN_AUTH}'
            - name: websiteName
              value: '{$WEBSITE_NAME}'
          tags:
            - tag: Matomo
              value: 'Matomo Last Minute Data'
        - uuid: 9ceec46e3cdf4b20894497edd0b977b8
          name: 'Max Actions per Visit'
          type: DEPENDENT
          key: matomo.max_actions
          delay: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.visitSummary.max_actions
          master_item:
            key: matomo.main_item
        - uuid: 7c4bcdbb866a4ce9b834e63b66169c59
          name: 'Mover Country'
          type: DEPENDENT
          key: matomo.mover.country
          delay: '0'
          value_type: TEXT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.country[*].label'
          master_item:
            key: matomo.movers_shakers
        - uuid: 1fbebba64ed3458c804d04ba0f880ccb
          name: 'No of hits in page url'
          type: DEPENDENT
          key: matomo.mover.hits
          delay: '0'
          value_type: TEXT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.pageUrls[*].nb_hits'
          master_item:
            key: matomo.movers_shakers
        - uuid: 80d55c31bf1446fa88f0070d7671ae72
          name: 'Number of visits in page url'
          type: DEPENDENT
          key: matomo.mover.noofvisit
          delay: '0'
          value_type: TEXT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.pageUrls[*].nb_visits'
          master_item:
            key: matomo.movers_shakers
        - uuid: 02076c630a044844a06c06d972b2c1a7
          name: 'Page Title'
          type: DEPENDENT
          key: matomo.mover.pagetitle
          delay: '0'
          value_type: TEXT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.pageTitles[*].label'
          master_item:
            key: matomo.movers_shakers
        - uuid: 1ef7a234739740bba9c6cafd0250d927
          name: 'Page Url'
          type: DEPENDENT
          key: matomo.mover.pageurl
          delay: '0'
          value_type: TEXT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.pageUrls[*].label'
          master_item:
            key: matomo.movers_shakers
        - uuid: d6f850f37b314e4d8c5cb2ebdae8c4dc
          name: 'No of unique visit in page url'
          type: DEPENDENT
          key: matomo.mover.unique
          delay: '0'
          value_type: TEXT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.pageUrls[*].nb_uniq_visitors'
          master_item:
            key: matomo.movers_shakers
        - uuid: 017a73fd590a449dabe2cf1708c549dc
          name: 'Mover and Shakers'
          type: SCRIPT
          key: matomo.movers_shakers
          value_type: TEXT
          trends: '0'
          params: |
            var API = {
                params: {
                    matomoBaseUrl: '{$MATOMO_BASE_URL}', // Matomo Base URL from Zabbix macro
                    tokenAuth: '{$TOKEN_AUTH}', // Auth Token from Zabbix macro
                    websiteName: '{$WEBSITE_NAME}', // Website Name from Zabbix macro
                    period: '{$PERIOD}', // Period from Zabbix macro
                    date: '{$DATE}' // Date from Zabbix macro
                },
            
            fetchSiteId: function () {
                var request = new HttpRequest();
                var siteIdUrl = this.params.matomoBaseUrl +
                    '/index.php?module=API&method=SitesManager.getSitesWithAdminAccess' +
                    '&format=json&token_auth=' + this.params.tokenAuth;
            
                var response = request.get(siteIdUrl);
                Zabbix.log(4, '[API Request] Site ID Response: ' + response);
            
                if (request.getStatus() !== 200) {
                    throw 'Failed to fetch Site ID. Status: ' + request.getStatus();
                }
            
                try {
                    var data = JSON.parse(response);
                    if (!Array.isArray(data)) {
                        throw 'Invalid response format. Expected an array, received: ' + JSON.stringify(data);
                    }
            
                    var siteId = null;
                    for (var i = 0; i < data.length; i++) {
                        if (data[i].name && data[i].name.trim().toLowerCase() === this.params.websiteName.trim().toLowerCase()) {
                            siteId = data[i].idsite;
                            break;
                        }
                    }
            
                    if (!siteId) {
                        throw 'No site ID found for the website: ' + this.params.websiteName;
                    }
            
                    return siteId;
                } catch (error) {
                    throw 'Error parsing Site ID response: ' + error + '. Raw response: ' + response;
                }
            },
            
                // Function to fetch data from Matomo API
                fetchData: function (endpoint, idSite) {
                    var request = new HttpRequest();
                    var apiUrl = this.params.matomoBaseUrl + endpoint +
                        '&idSite=' + idSite +
                        '&period=' + this.params.period + '&date=' + this.params.date +
                        '&format=json&token_auth=' + this.params.tokenAuth;
            
                    var response = request.get(apiUrl);
                    Zabbix.log(4, '[API Request] Response from ' + endpoint + ': ' + response);
            
                    if (request.getStatus() !== 200) {
                        throw 'Request failed for ' + endpoint + ' with status ' + request.getStatus();
                    }
            
                    try {
                        return JSON.parse(response);
                    } catch (error) {
                        throw 'Failed to parse response from ' + endpoint + ': ' + error;
                    }
                },
            
                // Fetch Country Data
                fetchCountry: function (idSite) {
                    return this.fetchData('/index.php?module=API&method=UserCountry.getCountry', idSite);
                },
            
                // Fetch Page Titles
                fetchPageTitles: function (idSite) {
                    return this.fetchData('/index.php?module=API&method=Actions.getPageTitles', idSite);
                },
            
                // Fetch Page URLs
                fetchPageUrls: function (idSite) {
                    return this.fetchData('/index.php?module=API&method=Actions.getPageUrls', idSite);
                }
            };
            
            // Execute the script
            try {
                var idSite = API.fetchSiteId();
                var countryData = API.fetchCountry(idSite);
                var pageTitles = API.fetchPageTitles(idSite);
                var pageUrls = API.fetchPageUrls(idSite);
            
                return JSON.stringify({
                    idSite: idSite,
                    country: countryData,
                    pageTitles: pageTitles,
                    pageUrls: pageUrls
                }, null, 2);
            } catch (error) {
                Zabbix.log(3, '[API Request] ERROR: ' + error);
                return JSON.stringify({ 'error': error });
            }
          timeout: 180s
          tags:
            - tag: Matomo
              value: 'Mover and Shakers'
        - uuid: 963fd7023af940e585a1e602c16c02fe
          name: 'Total Actions'
          type: DEPENDENT
          key: matomo.nb_actions
          delay: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.visitSummary.nb_actions
          master_item:
            key: matomo.main_item
        - uuid: 2d01086737f14a1ba1e74601e9af04c0
          name: 'Actions per Visit'
          type: DEPENDENT
          key: matomo.nb_actions_per_visit
          delay: '0'
          value_type: FLOAT
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.visitSummary.nb_actions_per_visit
          master_item:
            key: matomo.main_item
        - uuid: 6f09a0c0dc264296b2a66ee9632e490f
          name: 'Unique Visitors'
          type: DEPENDENT
          key: matomo.nb_uniq_visitors
          delay: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.visitSummary.nb_uniq_visitors
          master_item:
            key: matomo.main_item
        - uuid: 9d68c5f9c8d14ae28e1f75a2d3c68307
          name: 'Total Users'
          type: DEPENDENT
          key: matomo.nb_users
          delay: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.visitSummary.nb_users
          master_item:
            key: matomo.main_item
        - uuid: 549bef484fdf4227bdf0027d54e4526a
          name: 'Total Visits'
          type: DEPENDENT
          key: matomo.nb_visits
          delay: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.visitSummary.nb_visits
          master_item:
            key: matomo.main_item
        - uuid: d76de7a8503849848bc1984e59c799d1
          name: 'Visits Converted'
          type: DEPENDENT
          key: matomo.nb_visits_converted
          delay: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.visitSummary.nb_visits_converted
          master_item:
            key: matomo.main_item
        - uuid: fcc7aa29ff3547f3a706ccd7c315fb1a
          name: 'Operating System'
          type: DEPENDENT
          key: matomo.os
          delay: '0'
          value_type: CHAR
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.visitDetails[*].operatingSystem'
          master_item:
            key: matomo.main_item
        - uuid: db890b9ada0445da94abf0bfb4e7279a
          name: 'OS Version'
          type: SCRIPT
          key: matomo.os_version
          value_type: TEXT
          trends: '0'
          params: |
            var DevicesDetectionAPI = {
                params: {
                    matomoBaseUrl: '{$MATOMO_BASE_URL}', // Replace with your Matomo base URL
                    tokenAuth: '{$TOKEN_AUTH}', // Replace with your Auth Token
                    websiteName: '{$WEBSITE_NAME}', // Website Name from Zabbix macro
                    period: '{$PERIOD}', // Specify the period
                    date: '{$DATE}' // Specify the date
                },
            
                // Fetch Site ID from website name
                fetchSiteId: function () {
                    var request = new HttpRequest();
                    var siteIdUrl = this.params.matomoBaseUrl +
                        '/index.php?module=API&method=SitesManager.getAllSites' +
                        '&format=json&token_auth=' + this.params.tokenAuth;
            
                    var response = request.get(siteIdUrl);
                    Zabbix.log(4, '[Devices Detection API] Site ID Response: ' + response);
            
                    if (request.getStatus() !== 200) {
                        throw 'Failed to fetch Site ID. Status: ' + request.getStatus();
                    }
            
                    try {
                        var data = JSON.parse(response);
                        if (!Array.isArray(data)) {
                            throw 'Invalid response format. Expected an array.';
                        }
            
                        var siteId = null;
                        for (var i = 0; i < data.length; i++) {
                            if (data[i].name && data[i].name.trim().toLowerCase() === this.params.websiteName.trim().toLowerCase()) {
                                siteId = data[i].idsite;
                                break;
                            }
                        }
            
                        if (!siteId) {
                            throw 'No site ID found for the website: ' + this.params.websiteName;
                        }
            
                        return siteId;
                    } catch (error) {
                        throw 'Error parsing Site ID response: ' + error + '. Raw response: ' + response;
                    }
                },
            
                // Fetch Devices Detection data
                fetchBrowsersData: function (idSite) {
                    var request = new HttpRequest();
                    var apiUrl = this.params.matomoBaseUrl +
                        '/index.php?module=API&method=DevicesDetection.getOsVersions' +
                        '&idSite=' + idSite +
                        '&period=' + this.params.period +
                        '&date=' + this.params.date +
                        '&format=json&token_auth=' + this.params.tokenAuth;
            
                    var response = request.get(apiUrl);
                    Zabbix.log(4, '[Devices Detection API] Response: ' + response);
            
                    if (request.getStatus() !== 200) {
                        throw 'Failed to fetch Devices Detection data. Status: ' + request.getStatus();
                    }
            
                    try {
                        return JSON.parse(response);
                    } catch (error) {
                        throw 'Failed to parse Devices Detection response: ' + error;
                    }
                }
            };
            
            // Execute the script
            try {
                var idSite = DevicesDetectionAPI.fetchSiteId();
                var browsersData = DevicesDetectionAPI.fetchBrowsersData(idSite);
            
                return JSON.stringify({
                    idSite: idSite,
                    browsersData: browsersData
                }, null, 2);
            } catch (error) {
                Zabbix.log(3, '[Devices Detection API] ERROR: ' + error);
                return JSON.stringify({ 'error': error });
            }
          timeout: 90s
          tags:
            - tag: Matomo
              value: 'OS Version'
        - uuid: 5b861f676c124dc395bcea4995d06b19
          name: Events
          type: SCRIPT
          key: matomo.scripts
          value_type: TEXT
          trends: '0'
          params: |
            var API = {
                params: {
                    matomoBaseUrl: '{$MATOMO_BASE_URL}', // Matomo Base URL from Zabbix macro
                    tokenAuth: '{$TOKEN_AUTH}',           // Auth Token from Zabbix macro
                    websiteName: '{$WEBSITE_NAME}',        // Website name (New!)
                    period: '{$PERIOD}',                  // Period
                    date: '{$DATE}'                       // Date
                },
            
                idSite: null, // Will be set dynamically after lookup
            
                // Generic function to fetch data from Matomo API
                fetchData: function (endpoint) {
                    var request = new HttpRequest();
                    var apiUrl = this.params.matomoBaseUrl + endpoint +
                        '&period=' + this.params.period +
                        '&date=' + this.params.date +
                        '&format=json&token_auth=' + this.params.tokenAuth;
            
                    if (this.idSite !== null) {
                        apiUrl += '&idSite=' + this.idSite;
                    }
            
                    var response = request.get(apiUrl);
                    Zabbix.log(4, '[API Request] URL: ' + apiUrl);
                    Zabbix.log(4, '[API Request] Response from ' + endpoint + ': ' + response);
            
                    if (request.getStatus() !== 200) {
                        throw 'Request failed for ' + endpoint + ' with status ' + request.getStatus();
                    }
            
                    try {
                        return JSON.parse(response);
                    } catch (error) {
                        throw 'Failed to parse response from ' + endpoint + ': ' + error;
                    }
                },
            
                // First, fetch all sites and get idSite for our website
                fetchIdSite: function () {
                    var sites = this.fetchData('/index.php?module=API&method=SitesManager.getSitesWithAtLeastViewAccess');
                    for (var i = 0; i < sites.length; i++) {
                        if (sites[i].name === this.params.websiteName) {
                            this.idSite = sites[i].idsite;
                            Zabbix.log(4, '[API] Found idSite for ' + this.params.websiteName + ': ' + this.idSite);
                            return;
                        }
                    }
                    throw 'Website "' + this.params.websiteName + '" not found in Matomo.';
                },
            
                // Fetch Event Categories
                fetchEventCategories: function () {
                    return this.fetchData('/index.php?module=API&method=Events.getCategory');
                },
            
                // Fetch Event Actions
                fetchEventActions: function () {
                    return this.fetchData('/index.php?module=API&method=Events.getAction');
                },
            
                // Fetch Event Names
                fetchEventNames: function () {
                    return this.fetchData('/index.php?module=API&method=Events.getName');
                }
            };
            
            // Execute the script
            try {
                API.fetchIdSite(); // <== First step: find the ID based on website name
                var eventCategories = API.fetchEventCategories();
                var eventActions = API.fetchEventActions();
                var eventNames = API.fetchEventNames();
            
                return JSON.stringify({
                    eventCategories: eventCategories,
                    eventActions: eventActions,
                    eventNames: eventNames
                }, null, 2);
            } catch (error) {
                Zabbix.log(3, '[API Request] ERROR: ' + error);
                return JSON.stringify({ 'error': error });
            }
          timeout: 90s
          tags:
            - tag: Matomo
              value: Events
        - uuid: c04ff2f8b1b94f1eb05f191d149108c2
          name: 'Sum Visit Length'
          type: DEPENDENT
          key: matomo.sum_visit_length
          delay: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.visitSummary.sum_visit_length
          master_item:
            key: matomo.main_item
        - uuid: 3709a95f69d64551a21a1ad2e1bc2f5a
          name: 'Visit Date'
          type: DEPENDENT
          key: matomo.visit.date
          delay: '0'
          value_type: CHAR
          trends: '0'
          status: DISABLED
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.visitDetails[*].visitDate'
          master_item:
            key: matomo.main_item
        - uuid: d2726a7994d049ecb84624acd78ccf5f
          name: 'Visitor IP'
          type: DEPENDENT
          key: matomo.visit.ip
          delay: '0'
          value_type: CHAR
          trends: '0'
          status: DISABLED
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.visitDetails[*].visitIp'
          master_item:
            key: matomo.main_item
        - uuid: e2270a85970c43a5970d35d1cbddfa04
          name: 'Visitor Map'
          type: SCRIPT
          key: matomo.visitor
          value_type: TEXT
          trends: '0'
          params: |
            var API = {
                params: {
                    matomoBaseUrl: '{$MATOMO_BASE_URL}', // Base URL from Zabbix macro
                    tokenAuth: '{$TOKEN_AUTH}', // Auth Token from Zabbix macro
                    websiteName: '{$WEBSITE_NAME}', // Website Name from Zabbix macro
                    period: '{$PERIOD}', // Period from Zabbix macro
                    date: '{$DATE}' // Date from Zabbix macro
                },
            
                // Function to fetch site ID from the website name
                fetchSiteId: function () {
                    var request = new HttpRequest();
                    var siteIdUrl = this.params.matomoBaseUrl +
                        '/index.php?module=API&method=SitesManager.getSitesWithAdminAccess' +
                        '&format=json&token_auth=' + this.params.tokenAuth;
            
                    var response = request.get(siteIdUrl);
                    Zabbix.log(4, '[API Request] Site ID Response: ' + response);
            
                    if (request.getStatus() !== 200) {
                        throw 'Failed to fetch Site ID. Status: ' + request.getStatus();
                    }
            
                    try {
                        var data = JSON.parse(response);
                        if (!Array.isArray(data)) {
                            throw 'Invalid response format. Expected an array.';
                        }
            
                        var siteId = null;
                        for (var i = 0; i < data.length; i++) {
                            if (data[i].name === this.params.websiteName) {
                                siteId = data[i].idsite;
                                break;
                            }
                        }
            
                        if (!siteId) {
                            throw 'No site ID found for the website: ' + this.params.websiteName;
                        }
            
                        return siteId;
                    } catch (error) {
                        throw 'Error parsing Site ID response: ' + error;
                    }
                },
            
                // Function to fetch country data using the obtained site ID
                fetchCountryData: function (siteId) {
                    var request = new HttpRequest();
                    var countryUrl = this.params.matomoBaseUrl +
                        '/index.php?module=API&method=UserCountry.getCountry' +
                        '&idSite=' + siteId + '&period=' + this.params.period + '&date=' + this.params.date + '&format=json' +
                        '&token_auth=' + this.params.tokenAuth;
            
                    var response = request.get(countryUrl);
                    Zabbix.log(4, '[API Request] Country Data Response: ' + response);
            
                    if (request.getStatus() !== 200) {
                        throw 'Failed to fetch Country Data. Status: ' + request.getStatus();
                    }
            
                    return response;
                }
            };
            
            // Execute the script
            try {
                var idSite = API.fetchSiteId();
                var countryData = API.fetchCountryData(idSite);
                return JSON.stringify({ idSite: idSite, countryData: JSON.parse(countryData) }, null, 2);
            } catch (error) {
                Zabbix.log(3, '[API Request] ERROR: ' + error);
                return JSON.stringify({ 'error': error });
            }
          timeout: 90s
          tags:
            - tag: Matomo
              value: 'Visitor Map'
        - uuid: e8edf4c868e5438f89f1b572c3c460f5
          name: Country
          type: DEPENDENT
          key: matomo.visitor.country
          delay: '0'
          value_type: TEXT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.countryData[*].label'
          master_item:
            key: matomo.visitor
        - uuid: c01de2d9590240cfa8b5462df2f3e7b6
          name: 'Event Names'
          type: DEPENDENT
          key: matomo.visits2345678
          delay: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.eventNames[*].label'
          master_item:
            key: matomo.scripts
        - uuid: 1fe8ae42e62a47dd97aa8e5ac9049ad0
          name: 'Visits Over Time'
          type: SCRIPT
          key: matomo.visits_over_timenew
          value_type: TEXT
          trends: '0'
          params: |
            var VisitsSummaryAPI = {
                params: {
                    matomoBaseUrl: '{$MATOMO_BASE_URL}', // Replace with your Matomo base URL
                    tokenAuth: '{$TOKEN_AUTH}', // Replace with your Auth Token
                    websiteName: '{$WEBSITE_NAME}', // Website Name from Zabbix macro
                    period: '{$PERIOD}', // Specify the period
                    date: '{$DATE1}' // Specify the date
                },
            
                // Fetch Site ID from website name
                fetchSiteId: function () {
                    var request = new HttpRequest();
                    var siteIdUrl = this.params.matomoBaseUrl +
                        '/index.php?module=API&method=SitesManager.getAllSites' +
                        '&format=json&token_auth=' + this.params.tokenAuth;
            
                    var response = request.get(siteIdUrl);
                    Zabbix.log(4, '[Visits Summary API] Site ID Response: ' + response);
            
                    if (request.getStatus() !== 200) {
                        throw 'Failed to fetch Site ID. Status: ' + request.getStatus();
                    }
            
                    try {
                        var data = JSON.parse(response);
                        if (!Array.isArray(data)) {
                            throw 'Invalid response format. Expected an array.';
                        }
            
                        var siteId = null;
                        for (var i = 0; i < data.length; i++) {
                            if (data[i].name && data[i].name.trim().toLowerCase() === this.params.websiteName.trim().toLowerCase()) {
                                siteId = data[i].idsite;
                                break;
                            }
                        }
            
                        if (!siteId) {
                            throw 'No site ID found for the website: ' + this.params.websiteName;
                        }
            
                        return siteId;
                    } catch (error) {
                        throw 'Error parsing Site ID response: ' + error + '. Raw response: ' + response;
                    }
                },
            
                // Fetch Visits Summary data
                fetchVisitsSummary: function (idSite) {
                    var request = new HttpRequest();
                    var apiUrl = this.params.matomoBaseUrl +
                        '/index.php?module=API&method=VisitsSummary.get' +
                        '&idSite=' + idSite +
                        '&period=' + this.params.period +
                        '&date=' + this.params.date +
                        '&format=json&token_auth=' + this.params.tokenAuth;
            
                    var response = request.get(apiUrl);
                    Zabbix.log(4, '[Visits Summary API] Response: ' + response);
            
                    if (request.getStatus() !== 200) {
                        throw 'Failed to fetch Visits Summary data. Status: ' + request.getStatus();
                    }
            
                    try {
                        return JSON.parse(response);
                    } catch (error) {
                        throw 'Failed to parse Visits Summary response: ' + error;
                    }
                }
            };
            
            // Execute the script
            try {
                var idSite = VisitsSummaryAPI.fetchSiteId();
                var visitsSummary = VisitsSummaryAPI.fetchVisitsSummary(idSite);
            
                return JSON.stringify({
                    idSite: idSite,
                    visitsSummary: visitsSummary
                }, null, 2);
            } catch (error) {
                Zabbix.log(3, '[Visits Summary API] ERROR: ' + error);
                return JSON.stringify({ 'error': error });
            }
          timeout: 90s
          tags:
            - tag: Matomo
              value: 'Visits Over Time'
        - uuid: 4bd105682d1e4e6b94f571235ba918b4
          name: 'Number of Events over Events'
          type: DEPENDENT
          key: matomovcweuv
          delay: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.eventCategories[*].nb_events'
          master_item:
            key: matomo.scripts
        - uuid: 4e7f1d632ce24310add5a6c4b1b11948
          name: 'Browser Data'
          type: DEPENDENT
          key: qwertyuio
          delay: '0'
          value_type: TEXT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.browsersData[*].label'
          master_item:
            key: matomo.browsers
        - uuid: abd135812a034977b7a12db9fdaebb0a
          name: 'Visitors - Browsers'
          type: DEPENDENT
          key: sdfghjkl
          delay: '0'
          value_type: TEXT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.browsersData[*].nb_visits'
          master_item:
            key: matomo.browsers
        - uuid: bd133ba492b04459b17f653ebf18f3dd
          name: 'Visitors over Device Type'
          type: DEPENDENT
          key: sdfghjkljhgfx
          delay: '0'
          value_type: TEXT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.browsersData[*].nb_uniq_visitors'
          master_item:
            key: matomo.device_type
        - uuid: f77ff64c7e6640f5987d511d3c5a9f16
          name: 'Visitors Over Device Models'
          type: DEPENDENT
          key: wqdsrzcsh
          delay: '0'
          value_type: TEXT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.browsersData[*].nb_visits'
          master_item:
            key: matomo.device_model
        - uuid: bd1035f5d49441f98eecb162aac48bbf
          name: 'Visitors Over Country'
          type: DEPENDENT
          key: yewgfdte92wgh9o
          delay: '0'
          value_type: TEXT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.browsersData[*].nb_visits'
          master_item:
            key: matomo.country_new
      macros:
        - macro: '{$DATE}'
          value: today
          description: 'today , yesterday ,last7 , previous7,last30,previous30,currentWeek,currentMonth,currentYear,previousWeek,previousMonth,previousYear'
        - macro: '{$LASTMINUTES}'
          value: '5'
          description: 'Defines the time range (in minutes) for fetching real-time visitor data from Matomo. This macro helps in retrieving metrics for the last specified minutes.'
        - macro: '{$MATOMO_BASE_URL}'
          description: 'You need to mention the base url of matomo here'
        - macro: '{$PERIOD}'
          value: day
          description: 'day, week , month, year ,range'
        - macro: '{$TOKEN_AUTH}'
          description: 'The authentication token required to access the Matomo API. It ensures secure data retrieval and must be configured with appropriate permissions.'
        - macro: '{$WEBSITE_NAME}'
          description: 'The name of the website being monitored. This macro allows the template to dynamically fetch and display data for different websites without modifying the configuration manually.'
